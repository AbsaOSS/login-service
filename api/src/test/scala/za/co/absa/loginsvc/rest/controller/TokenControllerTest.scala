/*
 * Copyright 2023 ABSA Group Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package za.co.absa.loginsvc.rest.controller

import com.nimbusds.jose.jwk.{JWKSet, RSAKey}
import io.jsonwebtoken.security.Keys
import io.jsonwebtoken.{ExpiredJwtException, MalformedJwtException, SignatureAlgorithm}
import org.mockito.ArgumentMatchers.any
import org.mockito.Mockito.when
import org.scalatest.flatspec.AnyFlatSpec
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest
import org.springframework.boot.test.mock.mockito.MockBean
import org.springframework.context.annotation.Import
import org.springframework.http.MediaType
import org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.authentication
import org.springframework.test.context.TestPropertySource
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.{post, get}
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.{content, status}
import za.co.absa.loginsvc.model.User
import za.co.absa.loginsvc.rest.config.provider.ConfigProvider
import za.co.absa.loginsvc.rest.model.{AccessToken, RefreshToken}
import za.co.absa.loginsvc.rest.service.jwt.JWTService
import za.co.absa.loginsvc.rest.{AuthManagerConfig, FakeAuthentication, RestResponseEntityExceptionHandler, SecurityConfig}

import java.security.interfaces.RSAPublicKey
import java.util.Base64
import scala.concurrent.duration._

@TestPropertySource(properties = Array("spring.config.location=api/src/test/resources/application.yaml"))
@Import(Array(classOf[ConfigProvider], classOf[SecurityConfig], classOf[RestResponseEntityExceptionHandler], classOf[AuthManagerConfig]))
@WebMvcTest(controllers = Array(classOf[TokenController]))
class TokenControllerTest extends AnyFlatSpec
  with ControllerIntegrationTestBase {

  @Autowired
  override var mockMvc: MockMvc = _

  @MockBean
  private var jwtService: JWTService = _

  override def afterAll(): Unit = {
    super.afterAll()
    jwtService.close()
  }

  behavior of "generateToken"

  val fakeAccessJwt: AccessToken = AccessToken("abc.fakeJWTToken.abc")
  val fakeRefreshJwt: RefreshToken = RefreshToken("ab.fakeJWTToken.cd")
  val refreshDuration: FiniteDuration = 10.minutes

  it should "return tokens generated by mocked JWTService for the basic-auth authenticated user" in {
    when(jwtService.generateAccessToken(FakeAuthentication.fakeUser)).thenReturn(fakeAccessJwt)
    when(jwtService.generateRefreshToken(FakeAuthentication.fakeUser)).thenReturn(fakeRefreshJwt)
    when(jwtService.getConfiguredRefreshExpDuration).thenReturn(refreshDuration)

    val expectedJsonBody = s"""{"token": "${fakeAccessJwt.token}", "refresh": "${fakeRefreshJwt.token}"}"""

    mockMvc.perform(
      post("/token/generate")
        .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
        .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  it should "return tokens generated by mocked JWTService for the authenticated user with group-prefixes (single)" in {
    // `groups-prefixes` fill change the groups in user object passed to the jwtService.generateAccessToken
    val fakeUserFilteredGroups = FakeAuthentication.fakeUser.copy(groups = Seq("first-fake-group"))
    when(jwtService.generateAccessToken(fakeUserFilteredGroups)).thenReturn(fakeAccessJwt)
    when(jwtService.generateRefreshToken(fakeUserFilteredGroups)).thenReturn(fakeRefreshJwt)
    when(jwtService.getConfiguredRefreshExpDuration).thenReturn(refreshDuration)

    val expectedJsonBody = s"""{"token": "${fakeAccessJwt.token}", "refresh": "${fakeRefreshJwt.token}"}"""

    mockMvc.perform(
        post("/token/generate?group-prefixes=first")
          .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  it should "return tokens generated by mocked JWTService for the authenticated user with group-prefixes (multiple ,-separated)" in {
    val fakeUserFilteredGroups = FakeAuthentication.fakeUser.copy(groups = Seq("second-fake-group", "third-fake-group"))
    when(jwtService.generateAccessToken(fakeUserFilteredGroups)).thenReturn(fakeAccessJwt)
    when(jwtService.generateRefreshToken(fakeUserFilteredGroups)).thenReturn(fakeRefreshJwt)
    when(jwtService.getConfiguredRefreshExpDuration).thenReturn(refreshDuration)

    val expectedJsonBody = s"""{"token": "${fakeAccessJwt.token}", "refresh": "${fakeRefreshJwt.token}"}"""

    mockMvc.perform(
        post("/token/generate?group-prefixes=second,third,nonexistent")
          .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  it should "fail for anonymous (not authenticated) user" in {
    when(jwtService.generateAccessToken(any[User], any[Boolean])).thenReturn(fakeAccessJwt)

    mockMvc.perform(
        post("/token/generate?group-prefixes=second,third,nonexistent")
          .`with`(authentication(FakeAuthentication.fakeAnonymousAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isUnauthorized)
  }

  it should "return tokens generated by mocked JWTService for the kerberos authenticated user" in {
    when(jwtService.generateAccessToken(FakeAuthentication.fakeUser)).thenReturn(fakeAccessJwt)
    when(jwtService.generateRefreshToken(FakeAuthentication.fakeUser)).thenReturn(fakeRefreshJwt)
    when(jwtService.getConfiguredRefreshExpDuration).thenReturn(refreshDuration)

    val expectedJsonBody = s"""{"token": "${fakeAccessJwt.token}", "refresh": "${fakeRefreshJwt.token}"}"""

    mockMvc.perform(
        post("/token/generate")
          .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  // with enabled experimental features
  behavior of "generateTokenExperimentalGet"

  it should "return tokens generated by mocked JWTService for the basic-auth authenticated user" in {
    when(jwtService.generateAccessToken(FakeAuthentication.fakeUser)).thenReturn(fakeAccessJwt)
    when(jwtService.generateRefreshToken(FakeAuthentication.fakeUser)).thenReturn(fakeRefreshJwt)
    when(jwtService.getConfiguredRefreshExpDuration).thenReturn(refreshDuration)

    val expectedJsonBody = s"""{"token": "${fakeAccessJwt.token}", "refresh": "${fakeRefreshJwt.token}"}"""

    mockMvc.perform(
        get("/token/experimental/get-generate")
          .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  behavior of "refreshToken"

  it should "return refresh tokens by mocked JWTService for the authenticated user" in {
    val newFakeAccessJwt = AccessToken("abc.newFakeJWTToken.abc")
    val newFakeRefreshJwt = RefreshToken("ab.newFakeJWTToken.cd")

    when(jwtService.refreshTokens(fakeAccessJwt, fakeRefreshJwt)).thenReturn((newFakeAccessJwt, newFakeRefreshJwt))
    when(jwtService.getConfiguredRefreshExpDuration).thenReturn(refreshDuration)

    val expectedJsonBody = s"""{"token": "${newFakeAccessJwt.token}", "refresh": "${newFakeRefreshJwt.token}"}"""
    val properties = s"""{"token": "${fakeAccessJwt.token}", "refresh": "${fakeRefreshJwt.token}"}"""

    mockMvc.perform(
        post("/token/refresh")
          .contentType(MediaType.APPLICATION_JSON)
          .content(properties)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  it should "return 400 if bad tokens are supplied" in {
    when(jwtService.refreshTokens(fakeAccessJwt, fakeRefreshJwt))
      .thenThrow(new MalformedJwtException("sign fail desc"))

    val expectedJson =
      s"""{
      |    "message": "sign fail desc"
      |}""".stripMargin

    val properties = s"""{"token": "${fakeAccessJwt.token}", "refresh": "${fakeRefreshJwt.token}"}"""

    mockMvc.perform(
        post("/token/refresh")
          .contentType(MediaType.APPLICATION_JSON)
          .content(properties)
      )
      .andExpect(status.isBadRequest)
      .andExpect(content.json(expectedJson))
  }

  it should "return 401 if invalid tokens are supplied" in {
    when(jwtService.refreshTokens(fakeAccessJwt, fakeRefreshJwt)).thenThrow(new ExpiredJwtException(null, null, "expired jwt"))

    val expectedJson =
      s"""{
      |    "message": "expired jwt"
      |}""".stripMargin

    val properties = s"""{"token": "${fakeAccessJwt.token}", "refresh": "${fakeRefreshJwt.token}"}"""

    mockMvc.perform(
        post("/token/refresh")
          .contentType(MediaType.APPLICATION_JSON)
          .content(properties)
      )
      .andExpect(status.isUnauthorized)
      .andExpect(content.json(expectedJson))
  }


  behavior of "getPublicKey"

  it should "return a Base64 encoded public key from JWTService" in {
    val publicKey = Keys.keyPairFor(SignatureAlgorithm.RS256).getPublic
    when(jwtService.publicKeys).thenReturn((publicKey, None))

    val expectedJsonBody = s"""{"key": "${Base64.getEncoder.encodeToString(publicKey.getEncoded)}"}"""

    mockMvc.perform(
        get("/token/public-key")
          .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  it should "return only a single Base64 encoded public key from JWTService when previous and current keys are available" in {
    val publicKey = Keys.keyPairFor(SignatureAlgorithm.RS256).getPublic
    val secondaryPublicKey = Keys.keyPairFor(SignatureAlgorithm.RS256).getPublic
    when(jwtService.publicKeys).thenReturn((publicKey, Option(secondaryPublicKey)))

    val expectedJsonBody = s"""{"key": "${Base64.getEncoder.encodeToString(publicKey.getEncoded)}"}"""

    mockMvc.perform(
        get("/token/public-key")
          .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  behavior of "getAllPublicKeys"

  it should "return a single Base64 encoded public key from JWTService" in {
    val publicKey = Keys.keyPairFor(SignatureAlgorithm.RS256).getPublic
    when(jwtService.publicKeys).thenReturn((publicKey, None))

    val expectedJsonBody =
      s"""
         |{
         |  "keys": [
         |    {
         |      "key": "${Base64.getEncoder.encodeToString(publicKey.getEncoded)}"
         |    }
         |  ]
         |}
         |""".stripMargin

    mockMvc.perform(
        get("/token/public-keys")
          .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  it should "return both the current and previous Base64 encoded public keys from JWTService" in {
    val publicKey = Keys.keyPairFor(SignatureAlgorithm.RS256).getPublic
    val secondaryPublicKey = Keys.keyPairFor(SignatureAlgorithm.RS256).getPublic
    when(jwtService.publicKeys).thenReturn((publicKey, Option(secondaryPublicKey)))

    val expectedJsonBody =
      s"""
         |{
         |  "keys": [
         |    {
         |      "key": "${Base64.getEncoder.encodeToString(publicKey.getEncoded)}"
         |    },
         |    {
         |      "key": "${Base64.getEncoder.encodeToString(secondaryPublicKey.getEncoded)}"
         |    }
         |  ]
         |}
         |""".stripMargin

    mockMvc.perform(
        get("/token/public-keys")
          .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }

  behavior of "getPublicKeyJwks"

  it should "return a JWKS from JWTService" in {
    val publicKey = Keys.keyPairFor(SignatureAlgorithm.RS256).getPublic
    val jwk = new RSAKey.Builder(publicKey.asInstanceOf[RSAPublicKey]).build()
    val jwks = new JWKSet(jwk)

    when(jwtService.jwks).thenReturn(jwks)

    val expectedJsonBody = s"""
         |{
         |  "keys": [
         |    {
         |      "kty":"${jwk.getKeyType}",
         |      "e":"${jwk.getPublicExponent}",
         |      "n":"${jwk.getModulus}"
         |    }
         |  ]
         |}
         |""".stripMargin

    mockMvc.perform(
        get("/token/public-key-jwks")
          .`with`(authentication(FakeAuthentication.fakeUserAuthentication))
          .contentType(MediaType.APPLICATION_JSON)
      )
      .andExpect(status.isOk)
      .andExpect(content.json(expectedJsonBody))
  }
}
